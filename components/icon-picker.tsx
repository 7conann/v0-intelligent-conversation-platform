"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Search } from "lucide-react"
import { Input } from "@/components/ui/input"

interface IconPickerProps {
  value: string
  onChange: (icon: string) => void
  className?: string
}

const EMOJI_OPTIONS = [
  // Business & Office
  "üìÅ",
  "üìÇ",
  "üìä",
  "üìà",
  "üìâ",
  "üíº",
  "üéØ",
  "üöÄ",
  "üí°",
  "‚ö°",
  "üî•",
  "‚≠ê",
  "üåü",
  "üíé",
  "üèÜ",
  "üìã",
  "üìå",
  "üìç",
  "üìé",
  "üñáÔ∏è",
  "üìè",
  "üìê",
  "‚úÇÔ∏è",
  "üóÉÔ∏è",
  "üóÑÔ∏è",
  "üóÇÔ∏è",

  // Technology
  "üíª",
  "üñ•Ô∏è",
  "‚å®Ô∏è",
  "üñ±Ô∏è",
  "üñ≤Ô∏è",
  "üíæ",
  "üíø",
  "üìÄ",
  "üîå",
  "üîã",
  "üì±",
  "üìû",
  "‚òéÔ∏è",
  "üìü",
  "üì†",
  "üì∫",
  "üìª",
  "üéôÔ∏è",
  "üéöÔ∏è",
  "üéõÔ∏è",
  "üß≠",
  "‚è±Ô∏è",
  "‚è≤Ô∏è",
  "‚è∞",
  "üï∞Ô∏è",
  "‚åõ",
  "‚è≥",
  "üì°",
  "üõ∞Ô∏è",

  // Communication
  "‚úâÔ∏è",
  "üìß",
  "üì®",
  "üì©",
  "üì§",
  "üì•",
  "üì¶",
  "üì´",
  "üì™",
  "üì¨",
  "üì≠",
  "üìÆ",
  "üó≥Ô∏è",
  "‚úèÔ∏è",
  "‚úíÔ∏è",
  "üñãÔ∏è",
  "üñäÔ∏è",
  "üñåÔ∏è",
  "üñçÔ∏è",
  "üìù",
  "üí¨",
  "üí≠",
  "üó®Ô∏è",
  "üóØÔ∏è",

  // Money & Finance
  "üí∞",
  "üí¥",
  "üíµ",
  "üí∂",
  "üí∑",
  "üí∏",
  "üí≥",
  "üßæ",
  "üíπ",
  "üè¶",
  "üèß",
  "üìä",
  "üìà",
  "üìâ",

  // Tools & Settings
  "üîß",
  "üî®",
  "‚öíÔ∏è",
  "üõ†Ô∏è",
  "‚õèÔ∏è",
  "üî©",
  "‚öôÔ∏è",
  "üß∞",
  "üß≤",
  "‚öñÔ∏è",
  "üîó",
  "‚õìÔ∏è",
  "üß±",

  // Security & Protection
  "üîí",
  "üîì",
  "üîê",
  "üîë",
  "üóùÔ∏è",
  "üõ°Ô∏è",
  "üî∞",
  "‚ö†Ô∏è",
  "üö∏",
  "‚õî",
  "üö´",
  "üö≥",
  "üö≠",
  "üöØ",
  "üö±",

  // Navigation & Location
  "üß≠",
  "üó∫Ô∏è",
  "üö©",
  "üèÅ",
  "üöÅ",
  "‚úàÔ∏è",
  "üöÄ",
  "üõ∏",
  "üöÇ",
  "üöÉ",
  "üöÑ",
  "üöÖ",
  "üöÜ",
  "üöá",
  "üöà",
  "üöâ",
  "üöä",
  "üöù",
  "üöû",
  "üöã",
  "üöå",
  "üöç",
  "üöé",
  "üöê",
  "üöë",
  "üöí",
  "üöì",
  "üöî",
  "üöï",
  "üöñ",

  // Nature & Weather
  "üåç",
  "üåé",
  "üåè",
  "üåê",
  "üó∫Ô∏è",
  "üèîÔ∏è",
  "‚õ∞Ô∏è",
  "üåã",
  "üóª",
  "üèïÔ∏è",
  "üèñÔ∏è",
  "üèúÔ∏è",
  "üèùÔ∏è",
  "üèûÔ∏è",
  "‚òÄÔ∏è",
  "üå§Ô∏è",
  "‚õÖ",
  "üå•Ô∏è",
  "‚òÅÔ∏è",
  "üå¶Ô∏è",
  "üåßÔ∏è",
  "‚õàÔ∏è",
  "üå©Ô∏è",
  "üå®Ô∏è",
  "‚ùÑÔ∏è",
  "‚òÉÔ∏è",
  "‚õÑ",
  "üå¨Ô∏è",
  "üí®",
  "üå™Ô∏è",
  "üå´Ô∏è",
  "üåà",
  "‚òî",
  "‚ö°",
  "‚≠ê",
  "üåü",
  "‚ú®",
  "üí´",
  "üåô",
  "‚òÑÔ∏è",

  // Plants & Food
  "üå±",
  "üåø",
  "‚òòÔ∏è",
  "üçÄ",
  "üåæ",
  "üåµ",
  "üå¥",
  "üå≥",
  "üå≤",
  "üå∞",
  "üçÅ",
  "üçÇ",
  "üçÉ",
  "üçá",
  "üçà",
  "üçâ",
  "üçä",
  "üçã",
  "üçå",
  "üçç",
  "ü•≠",
  "üçé",
  "üçè",
  "üçê",
  "üçë",
  "üçí",
  "üçì",
  "ü•ù",
  "üçÖ",
  "ü••",
  "ü•ë",
  "üçÜ",
  "ü•î",
  "ü•ï",
  "üåΩ",
  "üå∂Ô∏è",
  "ü•í",
  "ü•¨",
  "ü•¶",

  // Animals
  "üê∂",
  "üê±",
  "üê≠",
  "üêπ",
  "üê∞",
  "ü¶ä",
  "üêª",
  "üêº",
  "üê®",
  "üêØ",
  "ü¶Å",
  "üêÆ",
  "üê∑",
  "üê∏",
  "üêµ",
  "üêî",
  "üêß",
  "üê¶",
  "üê§",
  "üê£",
  "üê•",
  "ü¶Ü",
  "ü¶Ö",
  "ü¶â",
  "ü¶á",
  "üê∫",
  "üêó",
  "üê¥",
  "ü¶Ñ",
  "üêù",
  "üêõ",
  "ü¶ã",
  "üêå",
  "üêû",
  "üêú",
  "ü¶ü",
  "ü¶ó",
  "üï∑Ô∏è",
  "üï∏Ô∏è",
  "ü¶Ç",
  "üê¢",
  "üêç",
  "ü¶é",
  "ü¶ñ",
  "ü¶ï",

  // Sports & Activities
  "‚öΩ",
  "üèÄ",
  "üèà",
  "‚öæ",
  "ü•é",
  "üéæ",
  "üèê",
  "üèâ",
  "ü•è",
  "üé±",
  "ü™Ä",
  "üèì",
  "üè∏",
  "üèí",
  "üèë",
  "ü•ç",
  "üèè",
  "ü•Ö",
  "‚õ≥",
  "ü™Å",
  "üèπ",
  "üé£",
  "ü§ø",
  "ü•ä",
  "ü•ã",
  "üéΩ",
  "üõπ",
  "üõº",
  "üõ∑",
  "‚õ∏Ô∏è",

  // Arts & Entertainment
  "üé®",
  "üé≠",
  "üé™",
  "üé¨",
  "üé§",
  "üéß",
  "üéº",
  "üéπ",
  "ü•Å",
  "üé∑",
  "üé∫",
  "üé∏",
  "ü™ï",
  "üéª",
  "üé≤",
  "‚ôüÔ∏è",
  "üéØ",
  "üé≥",
  "üéÆ",
  "üé∞",
  "üß©",
  "üß∏",
  "ü™Ö",
  "ü™Ü",
  "üñºÔ∏è",
  "üßµ",
  "ü™°",
  "üß∂",
  "ü™¢",

  // Objects & Items
  "üëì",
  "üï∂Ô∏è",
  "ü•Ω",
  "ü•º",
  "ü¶∫",
  "üëî",
  "üëï",
  "üëñ",
  "üß£",
  "üß§",
  "üß•",
  "üß¶",
  "üëó",
  "üëò",
  "ü•ª",
  "ü©±",
  "ü©≤",
  "ü©≥",
  "üëô",
  "üëö",
  "üëõ",
  "üëú",
  "üëù",
  "üéí",
  "üëû",
  "üëü",
  "ü•æ",
  "ü•ø",
  "üë†",
  "üë°",

  // Symbols & Signs
  "‚ù§Ô∏è",
  "üß°",
  "üíõ",
  "üíö",
  "üíô",
  "üíú",
  "üñ§",
  "ü§ç",
  "ü§é",
  "üíî",
  "‚ù£Ô∏è",
  "üíï",
  "üíû",
  "üíì",
  "üíó",
  "üíñ",
  "üíò",
  "üíù",
  "üíü",
  "‚òÆÔ∏è",
  "‚úùÔ∏è",
  "‚ò™Ô∏è",
  "üïâÔ∏è",
  "‚ò∏Ô∏è",
  "‚ú°Ô∏è",
  "üîØ",
  "üïé",
  "‚òØÔ∏è",
  "‚ò¶Ô∏è",
  "üõê",
  "‚õé",
  "‚ôà",
  "‚ôâ",
  "‚ôä",
  "‚ôã",
  "‚ôå",
  "‚ôç",
  "‚ôé",
  "‚ôè",
  "‚ôê",
  "‚ôë",
  "‚ôí",
  "‚ôì",

  // Arrows & Directions
  "‚¨ÜÔ∏è",
  "‚ÜóÔ∏è",
  "‚û°Ô∏è",
  "‚ÜòÔ∏è",
  "‚¨áÔ∏è",
  "‚ÜôÔ∏è",
  "‚¨ÖÔ∏è",
  "‚ÜñÔ∏è",
  "‚ÜïÔ∏è",
  "‚ÜîÔ∏è",
  "‚Ü©Ô∏è",
  "‚Ü™Ô∏è",
  "‚§¥Ô∏è",
  "‚§µÔ∏è",
  "üîÉ",
  "üîÑ",
  "üîô",
  "üîö",
  "üîõ",
  "üîú",
  "üîù",

  // Shapes & Patterns
  "üî¥",
  "üü†",
  "üü°",
  "üü¢",
  "üîµ",
  "üü£",
  "üü§",
  "‚ö´",
  "‚ö™",
  "üü•",
  "üüß",
  "üü®",
  "üü©",
  "üü¶",
  "üü™",
  "üü´",
  "‚¨õ",
  "‚¨ú",
  "‚óºÔ∏è",
  "‚óªÔ∏è",
  "‚óæ",
  "‚óΩ",
  "‚ñ™Ô∏è",
  "‚ñ´Ô∏è",
  "üî∂",
  "üî∑",
  "üî∏",
  "üîπ",
  "üî∫",
  "üîª",
  "üí†",
  "üîò",
  "üî≥",
  "üî≤",
]

export function IconPicker({ value, onChange, className }: IconPickerProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState("")

  const filteredEmojis = searchQuery ? EMOJI_OPTIONS.filter((emoji) => emoji.includes(searchQuery)) : EMOJI_OPTIONS

  const handleSelect = (emoji: string) => {
    onChange(emoji)
    setIsOpen(false)
    setSearchQuery("")
  }

  return (
    <>
      <Button
        type="button"
        onClick={() => setIsOpen(true)}
        variant="outline"
        className={`w-full justify-center ${className}`}
      >
        <span className="text-2xl">{value || "üìÅ"}</span>
      </Button>

      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent className="max-w-2xl bg-[var(--settings-bg)] border-[var(--sidebar-border)]">
          <DialogHeader>
            <DialogTitle className="text-white">Escolher √çcone</DialogTitle>
          </DialogHeader>

          <div className="space-y-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                type="text"
                placeholder="Buscar emoji..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-9 bg-[var(--agent-hover)] border-[var(--sidebar-border)] text-white placeholder:text-gray-400"
                autoFocus
              />
            </div>

            <div className="max-h-96 overflow-y-auto">
              <div className="grid grid-cols-10 gap-2">
                {filteredEmojis.length > 0 ? (
                  filteredEmojis.map((emoji, index) => (
                    <button
                      key={`${emoji}-${index}`}
                      type="button"
                      onClick={() => handleSelect(emoji)}
                      className={`w-12 h-12 flex items-center justify-center text-2xl rounded-lg hover:bg-[var(--agent-hover)] transition-all ${
                        value === emoji ? "bg-purple-500/20 ring-2 ring-purple-500" : ""
                      }`}
                    >
                      {emoji}
                    </button>
                  ))
                ) : (
                  <div className="col-span-10 text-center py-8 text-gray-400">Nenhum emoji encontrado</div>
                )}
              </div>
            </div>

            <div className="text-sm text-gray-400 text-center border-t border-[var(--sidebar-border)] pt-3">
              {filteredEmojis.length} de {EMOJI_OPTIONS.length} emojis dispon√≠veis
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  )
}
